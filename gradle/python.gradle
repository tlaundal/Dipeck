class PythonPluginExtension {
  Project project

  String sources = null
  String tests = null
  Object reportPath = "${ -> project.buildDir}/test-results/test/TEST-${ -> project.name}.xml"

  PythonPluginExtension(Project project) {
    this.project = project
  }
}

def extension = project.extensions.create('python', PythonPluginExtension, project)

apply plugin: "com.jetbrains.python.envs"
envs {
  bootstrapDirectory = file("${projectDir}/.gradle/envs-bootstrap")
  envsDirectory = file("${buildDir}/envs")

  python "python36", "3.6.5"
  virtualenv "envPython36", "python36", [ 'pip' ]
}
afterEvaluate {
  install_python_build {
    doFirst {
      file("${buildDir}").mkdir()
    }
  }
}

def env = "${buildDir}/envs/envPython36/"

task pipDependencies(type: Exec) {
  afterEvaluate {
    dependsOn tasks.build_envs
  }
  inputs.file "requirements.txt"
  executable "bash"


  afterEvaluate {
    // The following is a hack, but seems to work
    outputs.dir "${env}/lib/python3.6/site-packages/"

    args "-c", """source ${env}/bin/activate && \\
                  which python; \\
                  which pip; \\
                  head -n 1 \$(which pip); \\
                  ls -R ${env}; \\
                  python -m pip install -r requirements.txt"""
  }
}

task test(type: Exec, dependsOn: pipDependencies) {
  executable "bash"

  afterEvaluate {
    if (extension.sources) {
      inputs.dir extension.sources
    }
    if (extension.tests) {
      inputs.dir extension.tests
    }

    outputs.file extension.reportPath

    args "-c", """source ${env}/bin/activate && \\
                  pytest -q --junitxml=${extension.reportPath}"""
  }
}

check.dependsOn test
assemble.dependsOn pipDependencies
