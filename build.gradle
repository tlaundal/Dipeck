buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    //  Used in our node script plugin
    classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
  }
}

apply plugin: 'base'

void dependsOnChildren(Task owner, String taskName) {
  subprojects.each { child -> child.afterEvaluate {
    def childTask = child.tasks.findByPath taskName
    if (childTask) {
      owner.dependsOn childTask
    }
  } }
}

task composeDown(type: Exec) {
  dependsOnChildren(composeDown, 'composeDown')

  executable "docker-compose"
  args "down"
}

task composeUpFreshVolumes(type: Exec) {
  dependsOnChildren(composeUpFreshVolumes, 'composeBuild')

  executable "docker-compose"
  args "up", "-d", "--renew-anon-volumes"
}

task collectReports(type: Copy) {
  include "TEST-*.xml"

  subprojects.each { child ->
    def path = "${child.buildDir}/test-results/test"
    inputs.dir path
    from path

    child.afterEvaluate {
      // Set a dependency from collectReports to this child's test task
      if (child.tasks.findByName('test')) {
        dependsOn child.tasks.test
      }
      if (child.tasks.findByName('integrationTest')) {
        mustRunAfter child.tasks.integrationTest
      }
    }
  }

  def path = "${buildDir}/test-reports/collected/"
  outputs.dir "${buildDir}/test-reports/collected/"
  into path
}

task combineReports(dependsOn: collectReports) {
  def output = file("${buildDir}/test-reports/combined.xml")
  inputs.dir "${buildDir}/test-reports/collected/"
  outputs.file output

  doLast {
    def slurper = new XmlSlurper()

    new groovy.xml.StreamingMarkupBuilder().bind {
      mkp.yield file("${buildDir}/test-reports/collected/").listFiles()
        .toList().stream()
        .map(slurper.&parse)
        // Flatten files with multiple testsuites
        .flatMap({ it?.testsuite.list().stream() ?: [it].stream() })
        // Only testsuites with testcases
        .filter({ !!it.testcase.size() })
        .collect({
          slurper.parseText '<testsuites name="Dipeck tests"></testsuites>'
        }, { a, b -> a.appendNode(b); a }, {})
    }.writeTo(output.newWriter())
  }
}

task renderReport(type: Exec, dependsOn: combineReports) {
  inputs.file "${buildDir}/test-reports/combined.xml"
  outputs.file "${buildDir}/test-reports/report.html"

  executable "xunit-viewer"
  args "--results=./build/test-reports/combined.xml",
       "--output=./build/test-reports/report.html"
}

check.dependsOn renderReport
